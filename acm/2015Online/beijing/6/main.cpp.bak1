#include <bits/stdc++.h>

using namespace std;

int main()
{
    ios::sync_with_stdio(false);
    int n, m, k, x, y, ws, hs, wi, hi, ew, eh, vew, veh;
    int wf[100001] = {0, 1};
    int hf[100001] = {0, 1};
    int wa[100001] = {0};
    int ha[100001] = {0};
    vector<int> wp, hp;
    while (cin>>n>>m) {
        memset(wf, 0, sizeof(int[100001]));
        memset(hf, 0, sizeof(int[100001]));
        wf[1] = 1;
        hf[1] = 1;
        k = 0;
        for (int i = 2; i <= n; ++i)
            cin>>wf[i];
        for (int i = 2; i <= n; ++i)
            cin>>hf[i];
        for (int i = 0; i < m; ++i) {
            cin>>x>>y;
            memset(wa, 0, sizeof(int[100001]));
            memset(ha, 0, sizeof(int[100001]));
            wp.clear();
            hp.clear();
            ws = (x+k)%n+1;
            hs = (y+k)%n+1;
            wi = ws;
            hi = hs;

            wp.push_back(wi);
            wa[wi] = 1;
            while (wi != 1) {
                wi = wf[wi];
                wp.push_back(wi);
                wa[wi] = wp.size();
            }

            hp.push_back(hi);
            ha[hi] = 1;
            while (hi != 1) {
                hi = hf[hi];
                hp.push_back(hi);
                ha[hi] = hp.size();
            }

            for (unsigned int i = 0; i < wp.size(); ++i) {
                if (ha[wp[i]]) {
                    vew = i+ha[wp[i]];
                    ew = wp[i];
                    break;
                }
            }

            for (unsigned int i = 0; i < hp.size(); ++i) {
                if (wa[hp[i]]) {
                    veh = i+wa[hp[i]];
                    eh = hp[i];
                    break;
                }
            }
            k = vew>veh?eh:ew;
            cout<<k<<' '<<wa[k]<<' '<<ha[k]<<endl;
        }
    }
    return 0;
}

